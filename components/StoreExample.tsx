import { Alert } from 'react-native';
import { Button, Card, H3, Paragraph, XStack, YStack } from 'tamagui';

import { useExampleStore, type User } from '../stores';

export default function StoreExample() {
  const counter = useExampleStore(state => state.counter);
  const user = useExampleStore(state => state.user);
  const isLoggedIn = useExampleStore(state => state.user !== null);
  const increment = useExampleStore(state => state.increment);
  const decrement = useExampleStore(state => state.decrement);
  const setCounter = useExampleStore(state => state.setCounter);
  const reset = useExampleStore(state => state.reset);
  const setUser = useExampleStore(state => state.setUser);
  const clearUser = useExampleStore(state => state.clearUser);

  const handleSetUser = () => {
    const newUser: User = {
      id: '1',
      name: '„Çµ„É≥„Éó„É´„É¶„Éº„Ç∂„Éº',
      email: 'sample@example.com',
    };
    setUser(newUser);
    Alert.alert('Success', 'User has been set!');
  };

  const handleClearUser = () => {
    clearUser();
    Alert.alert('Success', 'User has been cleared!');
  };

  return (
    <Card padding="$4" margin="$4">
      <YStack space="$4">
        <H3>Zustand Store Example</H3>

        <Card padding="$3" backgroundColor="$background">
          <YStack space="$2">
            <H3>„Ç´„Ç¶„É≥„Çø„ÉºÊ©üËÉΩ</H3>
            <Paragraph fontWeight="bold">„Ç´„Ç¶„É≥„Çø„Éº: {counter}</Paragraph>
            <XStack space="$2">
              <Button onPress={increment} theme="blue" flex={1}>
                Â¢óÂä†
              </Button>
              <Button onPress={decrement} theme="red" flex={1}>
                Ê∏õÂ∞ë
              </Button>
              <Button onPress={() => setCounter(10)} theme="green" flex={1}>
                10„Å´„Çª„ÉÉ„Éà
              </Button>
            </XStack>
          </YStack>
        </Card>

        <Card padding="$3" backgroundColor="$background">
          <YStack space="$2">
            <H3>„É¶„Éº„Ç∂„ÉºÁÆ°ÁêÜ</H3>
            <Paragraph fontWeight="bold">
              „É≠„Ç∞„Ç§„É≥Áä∂ÊÖã: {isLoggedIn ? '„É≠„Ç∞„Ç§„É≥‰∏≠' : '„É≠„Ç∞„Ç¢„Ç¶„Éà‰∏≠'}
            </Paragraph>
            {user ? (
              <YStack space="$1">
                <Paragraph>
                  „É¶„Éº„Ç∂„Éº: {user.name} ({user.email})
                </Paragraph>
              </YStack>
            ) : (
              <Paragraph color="$color11">„É¶„Éº„Ç∂„Éº: Êú™„É≠„Ç∞„Ç§„É≥</Paragraph>
            )}
            <XStack space="$2">
              {!user ? (
                <Button onPress={handleSetUser} theme="blue" flex={1}>
                  „Çµ„É≥„Éó„É´„É¶„Éº„Ç∂„Éº„Åß„É≠„Ç∞„Ç§„É≥
                </Button>
              ) : (
                <Button onPress={handleClearUser} theme="red" flex={1}>
                  „É≠„Ç∞„Ç¢„Ç¶„Éà
                </Button>
              )}
            </XStack>
          </YStack>
        </Card>

        <Card padding="$3" backgroundColor="$background">
          <YStack space="$2">
            <H3>„É™„Çª„ÉÉ„ÉàÊ©üËÉΩ</H3>
            <Button onPress={reset} theme="yellow">
              ÂÖ®„Å¶„É™„Çª„ÉÉ„Éà
            </Button>
          </YStack>
        </Card>

        <Card padding="$3" backgroundColor="$blue2">
          <YStack space="$1">
            <Paragraph fontSize="$2" fontWeight="bold" color="$blue11">
              üí° Features Demonstrated:
            </Paragraph>
            <Paragraph fontSize="$2" color="$blue11">
              ‚Ä¢ Global state management with Zustand
            </Paragraph>
            <Paragraph fontSize="$2" color="$blue11">
              ‚Ä¢ TypeScript type safety
            </Paragraph>
            <Paragraph fontSize="$2" color="$blue11">
              ‚Ä¢ AsyncStorage persistence
            </Paragraph>
            <Paragraph fontSize="$2" color="$blue11">
              ‚Ä¢ Dev tools integration
            </Paragraph>
          </YStack>
        </Card>
      </YStack>
    </Card>
  );
}
